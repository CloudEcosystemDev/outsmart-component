{
    "title": "OpenApi",
    
    "docsUrl": "",
    "url": "http://example.com",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "http://example.com",
                    "https://www.werkbonapp.nl/openapi/8",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            }
        }
    },
    "triggers": {
        "Getemployees": {
            "main": "./lib/triggers/Getemployees.js",
            "title": "Get employees",
            "description": "This api is used to get or edit employees in WorkorderApp.\nEach employee record can contain the following data:\n\n| Parameter  | Required | Type (size)   |\n|------------|----------|---------------|\n| firstname  | Y        | Varchar (255) |\n| lastname   | Y        | Varchar (255) |\n| number     | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getemployees.in.json",
                "out": "./lib/schemas/Getemployees.out.json"
            }
        },
        "Getprojects": {
            "main": "./lib/triggers/Getprojects.js",
            "title": "Get projects",
            "description": "This api is used to sync external projects with WorkorderApp.\nEach project record can contain the following data:\n\n| Parameter        | Required | Type (size)     |\n|------------------|----------|-----------------|\n| code             | Y        | Varchar (255)   |\n| code_ext         | N        | Varchar (255)   |\n| debtor_number    | Y        | Varchar (255)   |\n| status           | Y        | Varchar (255)   |\n| name             | Y        | Varchar (255)   |\n| description      | N        | Text            |\n| progress         | N        | Integer         |\n| date_start       | Y        | Varchar (255)   |\n| date_end         | N        | Varchar (255)   |\n| active           | N        | Integer (1 or 0)|",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getprojects.in.json",
                "out": "./lib/schemas/Getprojects.out.json"
            }
        },
        "Getprojects1": {
            "main": "./lib/triggers/Getprojects1.js",
            "title": "Get projects",
            "description": "This api is used to sync external projects with WorkorderApp.\nEach project record can contain the following data:\n\n| Parameter        | Required | Type (size)     |\n|------------------|----------|-----------------|\n| code             | Y        | Varchar (255)   |\n| code_ext         | N        | Varchar (255)   |\n| debtor_number    | Y        | Varchar (255)   |\n| status           | Y        | Varchar (255)   |\n| name             | Y        | Varchar (255)   |\n| description      | N        | Text            |\n| progress         | N        | Integer         |\n| date_start       | Y        | Varchar (255)   |\n| date_end         | N        | Varchar (255)   |\n| active           | N        | Integer (1 or 0)|",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getprojects1.in.json",
                "out": "./lib/schemas/Getprojects1.out.json"
            }
        },
        "Gettasks": {
            "main": "./lib/triggers/Gettasks.js",
            "title": "Get tasks",
            "description": "This api is used to sync external projects with WorkorderApp.\nEach project record can contain the following data:\n\n| Parameter        | Required | Type (size)     |\n|------------------|----------|-----------------|\n| code             | Y        | Varchar (255)   |\n| code_ext         | N        | Varchar (255)   |\n| debtor_number    | Y        | Varchar (255)   |\n| status           | Y        | Varchar (255)   |\n| name             | Y        | Varchar (255)   |\n| description      | N        | Text            |\n| progress         | N        | Integer         |\n| date_start       | Y        | Varchar (255)   |\n| date_end         | N        | Varchar (255)   |\n| active           | N        | Integer (1 or 0)|",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Gettasks.in.json",
                "out": "./lib/schemas/Gettasks.out.json"
            }
        },
        "GetNextNumber": {
            "main": "./lib/triggers/GetNextNumber.js",
            "title": "Get Next Number",
            "description": "This api is used to sync external projects with WorkorderApp.\nEach project record can contain the following data:\n\n| Parameter        | Required | Type (size)     |\n|------------------|----------|-----------------|\n| code             | Y        | Varchar (255)   |\n| code_ext         | N        | Varchar (255)   |\n| debtor_number    | Y        | Varchar (255)   |\n| status           | Y        | Varchar (255)   |\n| name             | Y        | Varchar (255)   |\n| description      | N        | Text            |\n| progress         | N        | Integer         |\n| date_start       | Y        | Varchar (255)   |\n| date_end         | N        | Varchar (255)   |\n| active           | N        | Integer (1 or 0)|",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetNextNumber.in.json",
                "out": "./lib/schemas/GetNextNumber.out.json"
            }
        },
        "Getcategories": {
            "main": "./lib/triggers/Getcategories.js",
            "title": "Get categories",
            "description": "This api is used to categories with WorkorderApp.\nEach category record can contain the following data:\n\n| Parameter                 | Description                                   | Required | Type (size)   |\n|---------------------------|-----------------------------------------------|----------|---------------|\n| cat_code                  | Category code                                 | Y        | Varchar (255) |\n| cat_cat_code              | Parent category code part                     | N        | Varchar (255) |\n| cat_name                  | Category name                                 | Y        | Varchar (255) |\n| cat_image                 | Url of the image. POST: An external url should be provided.  GET: You will receive a workorderapp url.     | N        | Varchar (255)      |\n| cat_display               | Indication if the category should be displayed| Y        | Int (10)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getcategories.in.json",
                "out": "./lib/schemas/Getcategories.out.json"
            }
        },
        "Getcategoriesbyfilter": {
            "main": "./lib/triggers/Getcategoriesbyfilter.js",
            "title": "Get categories by filter",
            "description": "This api is used to fetch category based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getcategoriesbyfilter.in.json",
                "out": "./lib/schemas/Getcategoriesbyfilter.out.json"
            }
        },
        "Gethourtypes": {
            "main": "./lib/triggers/Gethourtypes.js",
            "title": "Get hourtypes",
            "description": "This api is used to sync external hourtypes with WorkorderApp.\nEach hourtype record can contain the following data:\n\n| Parameter        | Required | Type (size)         |\n|------------------|----------|---------------------|\n| code             | Y        | Varchar (255)       |\n| name             | Y        | Varchar (255)       |\n| cost_booking     | Y        | Integer (1 or 0)    |\n| sale_booking     | Y        | Integer (1 or 0)    |\n| sale_price       | Y        | Decimal (> 0)       |\n| cost_price       | N        | Decimal (> 0)       | \n| active           | N        | Integer (1 or 0)    |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Gethourtypes.in.json",
                "out": "./lib/schemas/Gethourtypes.out.json"
            }
        },
        "Getmaterialcategories": {
            "main": "./lib/triggers/Getmaterialcategories.js",
            "title": "Get material categories",
            "description": "This api is used to sync material categories with WorkorderApp.\nEach material_categories record can contain the following data:\n\n| Parameter                 | Description                                   | Required | Type (size)   |\n|---------------------------|-----------------------------------------------|----------|---------------|\n| mct_mat_code              | Material code                                 | Y        | Varchar (255) |\n| mct_cat_code              | Category code                                 | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getmaterialcategories.in.json",
                "out": "./lib/schemas/Getmaterialcategories.out.json"
            }
        },
        "Getrelations": {
            "main": "./lib/triggers/Getrelations.js",
            "title": "Get relations",
            "description": "This api is used to sync external contacts with WorkorderApp.\nEach relation record can contain the following data:\n\n| Parameter        | Required | Type (size)   |\n|------------------|----------|---------------|\n| name             | Y        | Varchar (255) |\n| debtor_number    | Y        | Varchar (255) |\n| contact          | N        | Varchar (255) |\n| phone_number     | N        | Varchar (255) |\n| email            | N        | Varchar (255) |\n| email_workorder  | N        | Varchar (255) |\n| street           | Y        | Varchar (255) |\n| house_number     | N        | Varchar (255) |\n| postal_code      | Y        | Varchar (255) |\n| city             | Y        | Varchar (255) |\n| remark           | N        | Text (64kb)   |\n| latitude         | N        | Float (10,6)  |\n| longitude        | N        | Float (10,6)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getrelations.in.json",
                "out": "./lib/schemas/Getrelations.out.json"
            }
        },
        "Getmaterials": {
            "main": "./lib/triggers/Getmaterials.js",
            "title": "Get materials",
            "description": "This api is used to sync materials with WorkorderApp.\nEach material record can contain the following data:\n\n| Parameter    | Required | Type (size)   |\n|--------------|----------|---------------|\n| code         | Y        | Varchar (255) |\n| description  | Y        | Text (64kb)   |\n| price        | Y        | Decimal       |\n| unit         | Y        | Varchar (255) |\n| eancode      | N        | Varchar (55)  |\n| barcode      | N        | Varchar (55)  |\n| freefield1   | N        | Varchar (255) |\n| freefield2   | N        | Varchar (255) |\n| freefield3   | N        | Varchar (255) |\n| freefield4   | N        | Varchar (255) |\n| freefield5   | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getmaterials.in.json",
                "out": "./lib/schemas/Getmaterials.out.json"
            }
        },
        "Getvalues": {
            "main": "./lib/triggers/Getvalues.js",
            "title": "Get values",
            "description": "This api is used to sync materials with WorkorderApp.\nEach material record can contain the following data:\n\n| Parameter    | Required | Type (size)   |\n|--------------|----------|---------------|\n| code         | Y        | Varchar (255) |\n| description  | Y        | Text (64kb)   |\n| price        | Y        | Decimal       |\n| unit         | Y        | Varchar (255) |\n| eancode      | N        | Varchar (55)  |\n| barcode      | N        | Varchar (55)  |\n| freefield1   | N        | Varchar (255) |\n| freefield2   | N        | Varchar (255) |\n| freefield3   | N        | Varchar (255) |\n| freefield4   | N        | Varchar (255) |\n| freefield5   | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getvalues.in.json",
                "out": "./lib/schemas/Getvalues.out.json"
            }
        },
        "Getforms": {
            "main": "./lib/triggers/Getforms.js",
            "title": "Get forms",
            "description": "This api is used to sync external forms with WorkorderApp.\nEach form record can contain the following data:\n\n| Parameter | Description | Required | Type (size) |\n|-----------|--------------------------------------|----------|---------------|\n| name | Name of the form | Y | Varchar (255) |\n| data | JSON data of the form | N | Text (64kb) |\n| template | HTML template to display data in PDF | N | Text (64kb) |\n\nThe `data` parameters contains a JSON encoded representation of the form. The main element is called `fields` and contains an array of JSON objects representing a `field`.\nEach field contains the following data:\n\n| Parameter | Description |\n|-----------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| --------------- | ----------------------------------------------------------- |\n| label | The label of the field. |\n| field_type | The Type of the field. Can be `text`, `checkboxes`, `radio` , `dropdown` or `signature`. |\n| required | This field indicates if the field is required to complete. Text: Field is valid a value is filled. Checkboxes: Field is valid when all the boxes are checked. Radio: Field is valid when a option is checked. Dropdown: Field is valid when a option is selected. Signature: Field is valid when a signature is set |\n| cid | Unique indentification of the field. |\n| field_options | Array containing field options. See description below. |\n\nEach field_options contains the following data:\n\n| Parameter | Description |\n|-----------------|-------------------------------------------------------------------------------------------------|\n| --------------- | ----------------------------------------------------------------------------------------------- |\n| options | The options of the field. Used in `checkboxes`, `radio` , `dropdown`. See decription below |\n| value | Value added in `text` field or base64 encoded image in `signature` field. |\n\nEach options contains the following data:\n\n| Parameter     | Description                                                                       |\n|---------------|-----------------------------------------------------------------------------------| \n| checked       | Indicated if options is selected. Used in `checkboxes`, `radio` , `dropdown`.     | \n| label         | Label for the option                                                              |\n\n+ Sample JSON\n    + Text:` {\n      \"label\": \"Serienummer\",\n      \"field_type\": \"text\",\n      \"required\": true,\n      \"field_options\": {\n        \"size\": \"small\",\n        \"value\": \"\"\n      },\n      \"cid\": \"c6\"\n    }` \n    + Radio: ` {\n      \"label\": \"Type pomp\",\n      \"field_type\": \"radio\",\n      \"required\": true,\n      \"field_options\": {\n        \"options\": [\n          {\n            \"label\": \"type A\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type B\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type C\",\n            \"checked\": false\n          }\n        ]\n      },\n      \"cid\": \"c2\"\n    }`\n    + Checkboxes: ` {\n      \"label\": \"Type pomp\",\n      \"field_type\": \"checkboxes\",\n      \"required\": true,\n      \"field_options\": {\n        \"options\": [\n          {\n            \"label\": \"type A\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type B\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type C\",\n            \"checked\": false\n          }\n        ]\n      },\n      \"cid\": \"c2\"\n    }`\n    + Dropdown: ` {\n      \"label\": \"Dropdown\",\n      \"field_type\": \"dropdown\",\n      \"required\": true,\n      \"field_options\": {\n        \"options\": [\n          {\n            \"label\": \"A\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"B\",\n            \"checked\": false\n          }\n        ],\n        \"include_blank_option\": false\n      },\n      \"cid\": \"c10\"\n    }`\n    + Signature: `{\n      \"cid\": \"c5\",\n      \"field_options\": {\n        \"value\": \"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\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW9D/A4B7ViPrMDeYAAAAAElF\\nTkSuQmCC\\n\"\n      },\n      \"field_type\": \"signature\",\n      \"label\": \"Naamloos\",\n      \"required\": true\n    }`",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getforms.in.json",
                "out": "./lib/schemas/Getforms.out.json"
            }
        },
        "TimeSheet_Expenses_Deleteanentity": {
            "main": "./lib/triggers/TimeSheet_Expenses_Deleteanentity.js",
            "title": "TimeSheet - Expenses -  Delete an entity",
            "description": "object will contain the amount of affected rows.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TimeSheet_Expenses_Deleteanentity.in.json",
                "out": "./lib/schemas/TimeSheet_Expenses_Deleteanentity.out.json"
            }
        },
        "TimeSheet_Expenses_Getexpenses": {
            "main": "./lib/triggers/TimeSheet_Expenses_Getexpenses.js",
            "title": "TimeSheet - Expenses -  Get expenses",
            "description": "This api is used to fetch expenses based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TimeSheet_Expenses_Getexpenses.in.json",
                "out": "./lib/schemas/TimeSheet_Expenses_Getexpenses.out.json"
            }
        },
        "TimeSheet_Travel_Gettravel": {
            "main": "./lib/triggers/TimeSheet_Travel_Gettravel.js",
            "title": "TimeSheet - Travel - Get travel",
            "description": "This api is used to fetch travel rows based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TimeSheet_Travel_Gettravel.in.json",
                "out": "./lib/schemas/TimeSheet_Travel_Gettravel.out.json"
            }
        },
        "TimeSheet_Hours_Gethours": {
            "main": "./lib/triggers/TimeSheet_Hours_Gethours.js",
            "title": "TimeSheet - Hours - Get hours",
            "description": "This api is used to fetch hours based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2\n\n\n| Kolom                   | Voorbeeld waarde    | Omschrijving                          |\n|-------------------------|---------------------|---------------------------------------|\n| hrs_id                  | 9                   | Uniek regel ID                        |\n| hrs_cus_id              | 78                  | Klant id niet relevant                |\n| hrs_emp_nr              | 13                  | Medewerkers                           |\n| hrs_order_nr            | null                | Ordernummer van gekoppelde werkbon    |\n| hrs_order_description   | null                | Order omschrijving                    |\n| hrs_period_id           | null                | Uren regel ID                         |\n| hrs_hrt_hour_type       | C                   | Uursoort code                         |\n| hrs_debtor_nr           | null                | Debiteurnummer                        |\n| hrs_project_nr          | null                | Projectnummer                         |\n| hrs_project_activity_nr | null                | Activiteit                            |\n| hrs_date                | 2020-03-03          | Datum                                 |\n| hrs_start               | 09:00:00            | Starttijd                             |\n| hrs_end                 | 17:00:00            | Eindtijd                              |\n| hrs_break               | null                | Pauzetijd in minuten                  |\n| hrs_amount              | 8.00                | Decimaal aantal (Eind - start -pauze) |\n| hrs_billable            | 0                   | Indicatie Facturabel ja of nee        |\n| hrs_status              | 0                   | Status in urenstaat, zie statussen    |\n| hrs_status_project      | 0                   | Status in project, zie statussen      |\n| hrs_description         |                     | Uren omschrijving                     |\n| hrs_date_created        | 2020-02-24 15:31:50 | Datum aangemaakt                      |\n| hrs_date_modified       | null                | Datum aangepast                       |\n| hrs_date_approved       | null                | Datum goedgekeurd                     |\n| hrs_date_rejected       | null                | Datum afgekeurd                       |\n| hrs_created_by          | Administrator             | Aangemaakt door                       |\n| hrs_modified_by         | null                | Aangepast door                        |\n| hrs_approved_by         | null                | Goedgekeurd door                      |\n| hrs_rejected_by         | null                | Afgekeurd door                        |\n| hrs_rejected_reason     | null                | Reden afgekeurd                       |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TimeSheet_Hours_Gethours.in.json",
                "out": "./lib/schemas/TimeSheet_Hours_Gethours.out.json"
            }
        },
        "Notes_Getnotes": {
            "main": "./lib/triggers/Notes_Getnotes.js",
            "title": "Notes - Get notes",
            "description": "This api is used to fetch notes based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Notes_Getnotes.in.json",
                "out": "./lib/schemas/Notes_Getnotes.out.json"
            }
        },
        "Getlocation": {
            "main": "./lib/triggers/Getlocation.js",
            "title": "Get location",
            "description": "This api is used to get the locations of connected devices from WorkorderApp or post locations for certain identifiers. An identifier can be anything, for example employee nr or license plate. When posting a location the type should be specified.\nPost data should contain an array with objects containing the following parameters:\n\n| Parameter                 | Description                                                       | \n|---------------------------|-------------------------------------------------------------------|  \n| lat                       | Latitude                                                          |  \n| long                      | Longitude                                                         |  \n| identifier                | Unique identifier, for example employee number or license plate.  |  \n| type                      | 0 for employee, 1 for car                                         |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getlocation.in.json",
                "out": "./lib/schemas/Getlocation.out.json"
            }
        },
        "Expensecategories_Get": {
            "main": "./lib/triggers/Expensecategories_Get.js",
            "title": "Expense categories  - Get",
            "description": "This api is used to fetch addresses based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Expensecategories_Get.in.json",
                "out": "./lib/schemas/Expensecategories_Get.out.json"
            }
        },
        "Getworktypes": {
            "main": "./lib/triggers/Getworktypes.js",
            "title": "Get worktypes",
            "description": "This api is used to sync  worktypes with WorkorderApp.\nEach worktype record can contain the following data:\n\n| Parameter                 | Description                       | Required | Type (size)   |\n|---------------------------|-----------------------------------|----------|---------------|\n| wrt_name                  | Name                              | Y        | Varchar (255) |\n| wrt_description           | Description                       | Y        | Varchar (255) |\n| wrt_default_minutes       | Default minutes used for planning | Y        | Int (10) |\n| wrt_active                | Indicates if worktype is active   | Y        | Int (10)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getworktypes.in.json",
                "out": "./lib/schemas/Getworktypes.out.json"
            }
        },
        "Getpriorities": {
            "main": "./lib/triggers/Getpriorities.js",
            "title": "Get priorities",
            "description": "This api is used to sync priorities with WorkorderApp.\nEach priority record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the priority. The employee can edit this when added to a work order. | Y        | Varchar (255) | \n| app_enabled               | Indication if the priority should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getpriorities.in.json",
                "out": "./lib/schemas/Getpriorities.out.json"
            }
        },
        "Geterrors": {
            "main": "./lib/triggers/Geterrors.js",
            "title": "Get errors",
            "description": "This api is used to sync errors with WorkorderApp.\nEach error record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the error. The employee can edit this when added to a work order. | Y        | Varchar (255) | \n| app_enabled               | Indication if the error should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Geterrors.in.json",
                "out": "./lib/schemas/Geterrors.out.json"
            }
        },
        "Getsolutions": {
            "main": "./lib/triggers/Getsolutions.js",
            "title": "Get solutions",
            "description": "This api is used to sync solutions with WorkorderApp.\nEach solution record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the solution. The employee can edit this when added to a work order. | Y        | Varchar (255) | \n| app_enabled               | Indication if the solution should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getsolutions.in.json",
                "out": "./lib/schemas/Getsolutions.out.json"
            }
        },
        "Getpaymentmethods": {
            "main": "./lib/triggers/Getpaymentmethods.js",
            "title": "Get paymentmethods",
            "description": "This api is used to sync paymentmethods with WorkorderApp.\nEach paymentmethods record can contain the following data:\n\n| Parameter                 | Description                       | Required | Type (size)   |\n|---------------------------|-----------------------------------|----------|---------------|\n| pmd_description           | Description                       | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getpaymentmethods.in.json",
                "out": "./lib/schemas/Getpaymentmethods.out.json"
            }
        },
        "Getregions": {
            "main": "./lib/triggers/Getregions.js",
            "title": "Get regions",
            "description": "This api is used to sync regions with WorkorderApp.\nEach region record can contain the following data:\n\n| Parameter                 | Description               | Required | Type (size)   |\n|---------------------------|---------------------------|----------|---------------|\n| reg_code                  | Unique code               | Y        | Varchar (255) | \n| reg_name                  | Name of the region.       | Y        | Varchar (255) | \n| reg_zip_start             | Zip start of the region.  | N        | Integer (11) | \n| reg_zip_end               | Zip end of the region.    | N        | Integer (11) | \n| reg_city                  | City of the region.       | N        | Varchar (255) | \n| reg_country               | Country of the region.    | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getregions.in.json",
                "out": "./lib/schemas/Getregions.out.json"
            }
        },
        "Getvehicles": {
            "main": "./lib/triggers/Getvehicles.js",
            "title": "Get vehicles",
            "description": "This api is used to sync vehicles with WorkorderApp.\nEach vehicle record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| veh_license_plate         | Unique  license plate                                                                 | Y        | Varchar (255) | \n| veh_title               | Title of the vehicle | Y        | Varchar (255) | \n| veh_brand               | Brand of the vehicle  | N        | Varchar (255) | \n| veh_model               |  Model of the vehicle| N        | Varchar (255) | \n| veh_type               | Type of the vehicle. | N        | Varchar (255) | \n| veh_image               | Url of the image . POST: An external url should be provided.  GET: You will receive a workorderapp url.    | Y        |   | \n| veh_driver               | Driver of the vehicle. This us a reference to the employee number | N        | Varchar (255) | \n| veh_driving               | Indication if the vehicle is driving. When the value is set to 1 it will be shown in the planbord. | N        | Integer (11) | \n| veh_active               | Indication if the vehicle is active                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getvehicles.in.json",
                "out": "./lib/schemas/Getvehicles.out.json"
            }
        },
        "Getwarehouses": {
            "main": "./lib/triggers/Getwarehouses.js",
            "title": "Get warehouses",
            "description": "This api is used to sync vehicles with WorkorderApp.\nEach vehicle record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| veh_license_plate         | Unique  license plate                                                                 | Y        | Varchar (255) | \n| veh_title               | Title of the vehicle | Y        | Varchar (255) | \n| veh_brand               | Brand of the vehicle  | N        | Varchar (255) | \n| veh_model               |  Model of the vehicle| N        | Varchar (255) | \n| veh_type               | Type of the vehicle. | N        | Varchar (255) | \n| veh_image               | Url of the image . POST: An external url should be provided.  GET: You will receive a workorderapp url.    | Y        |   | \n| veh_driver               | Driver of the vehicle. This us a reference to the employee number | N        | Varchar (255) | \n| veh_driving               | Indication if the vehicle is driving. When the value is set to 1 it will be shown in the planbord. | N        | Integer (11) | \n| veh_active               | Indication if the vehicle is active                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getwarehouses.in.json",
                "out": "./lib/schemas/Getwarehouses.out.json"
            }
        },
        "Getmaterial_types": {
            "main": "./lib/triggers/Getmaterial_types.js",
            "title": "Get material_types",
            "description": "This api is used to sync material types with WorkorderApp.\nEach material type record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the material type.  | Y        | Varchar (255) | \n| app_enabled               | Indication if the material type should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getmaterial_types.in.json",
                "out": "./lib/schemas/Getmaterial_types.out.json"
            }
        },
        "Getworkstatusses": {
            "main": "./lib/triggers/Getworkstatusses.js",
            "title": "Get workstatusses",
            "description": "This api is used to sync workstatusses with WorkorderApp.\nEach workstatusses record can contain the following data:\n\n| Parameter                 | Description                       | Required | Type (size)   |\n|---------------------------|-----------------------------------|----------|---------------|\n| sta_code                  | Code                              | Y        | Varchar (255) | \n| sta_name                  | Name                              | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getworkstatusses.in.json",
                "out": "./lib/schemas/Getworkstatusses.out.json"
            }
        },
        "Getaddresses": {
            "main": "./lib/triggers/Getaddresses.js",
            "title": "Get addresses",
            "description": "This api is used to sync addresses with WorkorderApp. An address should always be related to a certain client and can have a main contact person associated with it.\n`adr_code` is used as a unique reference to either insert or update the address.\nEach address record can contain the following data:\n\n| Parameter                 | Description                                                                 | Required | Type (size)   |\n|---------------------------|-----------------------------------------------------------------------------|----------|---------------|\n| adr_debtor_nr             | Debtor number of the relation                                               | Y        | Varchar (255) |\n| adr_code                  | Unique code of the address. Used as reference in the workorder.             | Y        | Varchar (255) |\n| adr_cpn_code              | Contact person code of the address                                          | N        | Varchar (255) |\n| adr_line_1                | Address line. Usually street and number.                                    | Y        | Varchar (255) |\n| adr_zip                   | Zipcode of the address                                                      | Y        | Varchar (255) |\n| adr_city                  | City of the adress                                                          | Y        | Varchar (255) |\n| adr_country               | Country of the address                                                      | N        | Varchar (255) |\n| adr_remark                | Remark of the address                                                       | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getaddresses.in.json",
                "out": "./lib/schemas/Getaddresses.out.json"
            }
        },
        "Getaddressesbyfilter": {
            "main": "./lib/triggers/Getaddressesbyfilter.js",
            "title": "Get addresses by filter",
            "description": "This api is used to fetch addresses based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getaddressesbyfilter.in.json",
                "out": "./lib/schemas/Getaddressesbyfilter.out.json"
            }
        },
        "Getparts": {
            "main": "./lib/triggers/Getparts.js",
            "title": "Get parts",
            "description": "This api is now deprecated. Use materials to register the parts of certain objects.\nThis api is used to sync parts with WorkorderApp.\nEach part record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| prt_code                  | Unique code of the parts. Used as reference for other entities                                                         | Y        | Varchar (255) |\n| prt_name                  | Part name/description name                                                                                                             | Y        | Varchar (255) |\n| prt_sup_code              | Supplier code                                                                                                             | Y        | Varchar (255) |\n| prt_value                 | Value of a parts                                                                                                             | Y        | Varchar (255) |\n| prt_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.     | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getparts.in.json",
                "out": "./lib/schemas/Getparts.out.json"
            }
        },
        "Getobjectparts": {
            "main": "./lib/triggers/Getobjectparts.js",
            "title": "Get object parts",
            "description": "This api is used to sync object parts with WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section. Allowed columns: `opr_obj_code` `opr_prt_code` `opr_serial_number`\nEach object_part record can contain the following data:\n\n| Parameter                         | Description                                           | Required | Type (size)   |\n|-----------------------------------|-------------------------------------------------------|----------|---------------|\n| opr_obj_code                      | Object code                                           | Y        | Varchar (255) |\n| opr_prt_code                      | Object part (Artikelcode from items in materials)     | Y        | Varchar (255) |\n| opr_serial_number                 | Serial number of parts used in object                 | N        | Varchar (255) |\n| opr_amount                        | Amount of parts used in object                        | Y        | Int (10)      |\n| opr_timestamp_installation        | Date of installing (Y-m-d)                            | N        | Date       |\n| opr_warranty_months               | Amount of months, used to calculate expiration date.  | N        | Int (10)      |\n| opr_timestamp_warranty_expires    | Warranty expiration date, automatically calculated based on installation date and the warranty months    | N        | Varchar (255)      |\n| val_value_1                       | Freefield value 1                                     | N        | Varchar (255)      |\n| val_value_2  - val_value_20       | Freefield value 2  till 20                            | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getobjectparts.in.json",
                "out": "./lib/schemas/Getobjectparts.out.json"
            }
        },
        "Updateanexistingworkorder": {
            "main": "./lib/triggers/Updateanexistingworkorder.js",
            "title": "Update an existing workorder",
            "description": "This API is used to update an existing workorder. The row_id of workorder_no can be used to identify the specific workorder.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Updateanexistingworkorder.in.json",
                "out": "./lib/schemas/Updateanexistingworkorder.out.json"
            }
        },
        "Getworkorder": {
            "main": "./lib/triggers/Getworkorder.js",
            "title": "Get workorder",
            "description": "A workorder contains the following data:\n\n| Parameter                    | Detail                                                                                                    |\n|------------------------------|-----------------------------------------------------------------------------------------------------------|\n| Id                           | WBA database unique row number                                                                            |\n| WorkorderNo                  | Unique number originated from ERP/CRM                                                                     |\n| Order Nr                     | Unique Workorder number created in tablet app                                                             |\n| WorkDate                     | Scheduled date for work (d-m-Y)                                                                      |\n| WorkTime                     | Scheduled time for work (H:i)                                                                           |\n| WorkEndDate                  | Scheduled end date for work (d-m-Y)                                                                  |\n| WorkEndTime                  | Scheduled end time for work (H:i)                                                                       |\n| ProjectNr                    | Internal Project number                                                                                   |\n| ExternProjectNr              | External Project number                                                                                   |\n| CustomerName                 | Customer name                                                                                             |\n| CustomerDebtorNr             | Customer debtor number                                                                                    |\n| CustomerStreet               | Customer street                                                                                           |\n| CustomerStreetNo             | Customer street number                                                                                    |\n| CustomerEmail                | Customer Email                                                                                            |\n| CustomerZIP                  | Customer zip code                                                                                         |\n| CustomerCity                 | Customer city                                                                                             |\n| CustomerContactPerson        | Customer contact person                                                                                   |\n| CustomerPhone                | Customer phone number                                                                                     |\n| CustomerRemark               | Customer remark                                                                                           |\n| CustomerNameInvoice          | Invoice customer name                                                                                     |\n| CustomerDebtorNrInvoice      | Invoice customer debtor number                                                                            |\n| CustomerStreetInvoice        | Invoice customer street name                                                                              |\n| CustomerStreetNoInvoice      | Invoice customer street number                                                                            |\n| CustomerEmailInvoice         | Invoice customer email                                                                                    |\n| CustomerZIPInvoice           | Invoice customer zip code                                                                                 |\n| CustomerCityInvoice          | Invoice customer city                                                                                     |\n| CustomerContactPersonInvoice | Invoice customer contact person                                                                           |\n| CustomerPhoneInvoice         | Invoice customer phone number                                                                             |\n| CustomerRemarkInvoice        | Invoice customer remark                                                                                   |\n| TypeOfWork                   | Installatie, Garantie, Levering, Onderhoud, Project, Regie, Reparatie,Service, Storing, Verkoop, Verhuur  |\n| WorkDescription              | Work description of executed work                                                                         |\n| WorkInstruction              | Work instructions from ERP / CRM (future use)                                                             |\n| PaymentMethod                | niet van toepassing, op rekening, contact voldaan, pin betaling, conform offerte                          |\n| CreationDate                 | Date time of creation of workorder in WBA backoffice                                                      |\n| EmployeeNr                   | Employee Number                                                                                           |\n| Signature                    | Signature file name                                                                                       |\n| SignatureUrl                 | Url to download/open signature image                                                                      |\n| PdfUrl                       | Url to download/open PDF                                                                                  |\n| WordUrl                      | Url to download/open Word document                                                                        |\n| WorksheetCode                | Unique code to use when retrieving a document                                                             |\n| Status                       | Status of the workorder                                                                                   |\n| WorkFinished                 | Indication if the work is finished. When the value is 1 the employee marked the work ready in the tablet. |\n| Archived                     | Indication if the workorder is archived                                                                   |\n| Photos                       | Array of photo objects (URL's)                                                                            |\n| Workperiods                  | Array of Workperiods                                                                                      |\n| Materials                    | Array of used materials (MaterialNr is amount of materials)                                               |\n| Documents                    | Array of file names                                                                                       |\n| Forms                        | Array of forms. Each row contains Name, Data and ObjectCode                                               |\n| Employees                    | Array of employee numbers.                                                                                |\n| WorkObjects                  | Array of objects codes.                                                                                          |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getworkorder.in.json",
                "out": "./lib/schemas/Getworkorder.out.json"
            }
        },
        "Getworkorders": {
            "main": "./lib/triggers/Getworkorders.js",
            "title": "Get workorders",
            "description": "This api is used to get a list of workorders from WorkorderApp.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getworkorders.in.json",
                "out": "./lib/schemas/Getworkorders.out.json"
            }
        },
        "Getobjectsbyfilter": {
            "main": "./lib/triggers/Getobjectsbyfilter.js",
            "title": "Get objects by filter",
            "description": "This api is used to fetch objects based on a filter. Filters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getobjectsbyfilter.in.json",
                "out": "./lib/schemas/Getobjectsbyfilter.out.json"
            }
        },
        "Getobjects": {
            "main": "./lib/triggers/Getobjects.js",
            "title": "Get objects",
            "description": "This api is used to sync objects with WorkorderApp.\nEach object record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| obj_code                  | Unique code of the object. Used as reference for other entities                                                           | Y        | Varchar (255) |\n| obj_sup_code              | Supplier code. Used as reference to supplier entity                                                                       | N        | Varchar (255) |\n| obj_debiteur_nummer       | Debtor number. Used as reference to customer clients.                                                                     | Y        | Varchar (255) |\n| obj_adr_code              | Address code. Used as a reference to the addres of a customer client.                                                     | N        | Varchar (255) |\n| obj_obj_code              | Parent object code.                                                                                                       | N        | Varchar (255) |\n| obj_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.               | N        | Varchar (255) |\n| obj_description           | Description of the object                                                                                                 | Y        | Varchar (255) |\n| obj_price                 | Price of the object                                                                                                       | N        | Decimal (7,2) |\n| obj_floor_level           | Floor level of the object                                                                                                 | N        | Int (10)      |\n| obj_location              | Textual description of the location of the object                                                                         | N        | Varchar (255) |\n| obj_latitude              | Latitude of the location of the object                                                                                    | N        | Float (10,6)  |\n| obj_longitude             | Longitude of the location of the object                                                                                   | N        | Float (10,6)  |\n| obj_type                  | Type                                                                                                                      | N        | Varchar (255) |\n| obj_model                 | Model                                                                                                                     | N        | Varchar (255) |\n| obj_brand                 | Brand                                                                                                                     | N        | Varchar (255) |\n| obj_date_warranty_expires | Expiration date of the warranty                                                                                           | N        | Varchar (255) |\n| obj_serialnumber          | Serialnumber of the object                                                                                                | N        | Varchar (255) |\n| obj_date_last_inspection  | Date of last inspection                                                                                                   | N        | Varchar (255) |\n| obj_date_installation     | Date of installation                                                                                                      | N        | Varchar (255) |\n| obj_freefield_1           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_2           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_3           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_4           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_5           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_6           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_7           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_8           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_9           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_10          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_11          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_12          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_13          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_14          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_15          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_16          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_17          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_18          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_19          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_20          |                                                                                                                           | N        | Varchar (255) |\n| obj_order                 | Sort order of an object                                                                                                   | N        | Int (10)      |\n| obj_created               | Timestamp of creating                                                                                                     | N        | DateTime      |\n| obj_modified              | Timestamp of modifying                                                                                                    | N        | DateTime      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getobjects.in.json",
                "out": "./lib/schemas/Getobjects.out.json"
            }
        },
        "Getchangedobjects": {
            "main": "./lib/triggers/Getchangedobjects.js",
            "title": "Get changed objects",
            "description": "This api is used to fetch changed objects. A change can be made from the app. Once the information is processed the api can be called with the obj_code parameter. The changed indicator will be set to 0 so the record won't be shown again.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getchangedobjects.in.json",
                "out": "./lib/schemas/Getchangedobjects.out.json"
            }
        },
        "Getchangedobjects1": {
            "main": "./lib/triggers/Getchangedobjects1.js",
            "title": "Get changed objects",
            "description": "This api is used to fetch changed object_parts. A change can be made from the app. Use the object_parts to pass a timestamp Y-m-d H:i:s to only show records mutated after that timestamp.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getchangedobjects1.in.json",
                "out": "./lib/schemas/Getchangedobjects1.out.json"
            }
        },
        "Getsuppliers": {
            "main": "./lib/triggers/Getsuppliers.js",
            "title": "Get suppliers",
            "description": "This api is used to sync suppliers with WorkorderApp.\nEach supplier record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| sup_code                  | Unique code of the supplier. Used as reference for other entities                                                         | Y        | Varchar (255) |\n| sup_name                  | Supplier name                                                                                                             | Y        | Varchar (255) |\n| sup_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.               | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getsuppliers.in.json",
                "out": "./lib/schemas/Getsuppliers.out.json"
            }
        },
        "Getfreefields": {
            "main": "./lib/triggers/Getfreefields.js",
            "title": "Get freefields",
            "description": "This api is used to sync suppliers with WorkorderApp.\nEach supplier record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| sup_code                  | Unique code of the supplier. Used as reference for other entities                                                         | Y        | Varchar (255) |\n| sup_name                  | Supplier name                                                                                                             | Y        | Varchar (255) |\n| sup_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.               | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getfreefields.in.json",
                "out": "./lib/schemas/Getfreefields.out.json"
            }
        },
        "Getquotation": {
            "main": "./lib/triggers/Getquotation.js",
            "title": "Get quotation",
            "description": "This api is used to fetch generated quotations from WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getquotation.in.json",
                "out": "./lib/schemas/Getquotation.out.json"
            }
        },
        "GetPrices": {
            "main": "./lib/triggers/GetPrices.js",
            "title": "Get Prices",
            "description": "This api is used to fetch generated quotations from WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetPrices.in.json",
                "out": "./lib/schemas/GetPrices.out.json"
            }
        },
        "Getinvoice": {
            "main": "./lib/triggers/Getinvoice.js",
            "title": "Get invoice",
            "description": "This api is used to fetch generated invoices from WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section.\n\n| Parameter                 | Description                                                                                           |\n|---------------------------|-------------------------------------------------------------------------------------------------------|\n| inv_id                    | Unique invoice ID  number of the invoice                                                              |\n| inv_worksheet_id          | Worksheet ID that is used to generate this invoice                                                    |\n| inv_quo_id                | Quotation ID that is used to generate this invoice                                                    |\n| inv_inv_id                | Parent invoice ID. Used when creating a credit invoice.                                               |\n| inv_type                  | Invoice type, can be DEBIT, CREDIT, CONCEPT_DEBIT or CONCEPT_CREDIT                                   |\n| inv_currency_code         | ISO 4217 currency code                                                                                |\n| inv_currency_symbol       | Currency symbol shown in the UI                                                                       |\n| inv_description           | Description of the invoice                                                                            |\n| inv_invoice_debtor_nr     | Debtor number of the assigned relation                                                                |\n| inv_invoice_debtor_name   | Debtor name of the assigned relation                                                                  |\n| inv_invoice_debtor_email  | Debtor e-mail of the assigned relation                                                                |\n| inv_number_numeric        | Invoice number numeric value                                                                          |\n| inv_number_formatted      | Pretty formatted invoice number                                                                       |\n| inv_status                | Invoice status, can be OPEN, PAYED, OVERDUE, REMINDER_1, REMINDER_2, REMINDER_3 or ...                |\n| inv_reference             | Reference, example purchase order number workorder number                                             |\n| inv_date                  | Invoice date                                                                                          |\n| inv_due_date              | Invoice due date                                                                                      |\n| inv_due_days              | Amount of due days. This days are added to the inv_date to calculate the inv_due_date.                |\n| inv_terms                 | Terms shown in the footer of the PDF.                                                                 |\n| inv_header                | Header shown on top of the PDF.                                                                       |\n| inv_amount                | Total amount including VAT.                                                                           |\n| inv_amount_excl           | Total amount excluding VAT.                                                                           |\n| inv_balance               | Total amounts of the transactions registered to this invoice.                                         |\n| inv_user_create           | User who created this invoice                                                                         |\n| inv_user_mutate           | User who mutated this invoice                                                                         |\n| inv_user_send             | User who marked this invoice as send.                                                                 |\n| inv_timestamp_create      | Timestamp of creation                                                                                 |\n| inv_timestamp_mutate      | Timestamp of mutating                                                                                 |\n| inv_timestamp_payed       | Timestamp when the invoice was marked as payed (inv_amount equal to inv_balance)                      |\n| inv_timestamp_send        | Timestamp of marking the invoice as send.                                                             |\n| iln_lines                 | Array of invoice lines.                                                                               |\n| invoice_debtor            | Invoice debtor.                                                                                       |\n| pdf                       | Temporary PDF url.                                                                                    |\n| ubl                       | Temporary ubl 2.0 url.                                                                                |\n\nInvoice line parameters\n\n| Parameter             | Description                                      |\n|-----------------------|--------------------------------------------------|\n| iln_id                | Line ID                                          |\n| iln_inv_id            | Invoice Id                                       |\n| iln_order             | Position of the line                             |\n| iln_material_code     | Material code                                    |\n| iln_material_hourtype | Hourtype code                                    |\n| iln_description       | Line description                                 |\n| iln_amount            | Line amount                                      |\n| iln_price             | Item price                                       |\n| iln_vat_percentage    | Vat percentage                                   |\n| iln_discount          | Discount percentage                              |\n| iln_total             | Total price excluding vat and discount           |\n| iln_total_discount    | Calculated discount amount                       |\n| iln_total_vat         | Calculated vat amount                            |\n| iln_total_excl        | Total price excluding vat and including discount |\n| iln_total_incl        | Total price including vat and including discount |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getinvoice.in.json",
                "out": "./lib/schemas/Getinvoice.out.json"
            }
        },
        "Gettransactions": {
            "main": "./lib/triggers/Gettransactions.js",
            "title": "Get transactions",
            "description": "This api is used to fetch a single generated invoice from WorkorderApp.\nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1&operator=gt\nAdding multiple filters: &key[]=key1&value[]=value1&operator[]=eq&key[]=key2&value[]=value2&operator[]=gt\n\nFollowing operators are allowed:\n\n| Operator | Description                 |\n|----------|-----------------------------|\n| li       | Like (%)                    |\n| eq       | Equal (=)                   |\n| ne       | Not equal (!=)              |\n| gt       | Greather than (>)           |\n| ge       | Greather than or equal (>=) |\n| lt       | Less than  (<)              |\n| le       | Less than or equal (<=)     |\nTransaction parameters. The invoice id of a transaction transaction can be empty if a transaction is not assigned to an invoice. Once it is assigned the balance of the invoice will be adjusted.\n\n| Parameter                    | Description                                | Type         |\n|-----------------------------|--------------------------------------------|--------------|\n| int_inv_id                  | Invoice ID                                 | int(11)      |\n| int_transaction_id          | Transaction ID                             | varchar(255) |\n| int_external_transaction_id | External Transaction ID                    | varchar(255) |\n| int_description             | Transaction Description                    | varchar(255) |\n| int_amount                  | Transaction amount                         | decimal(7,2) |\n| int_type                    | Transaction type                           | varchar(255) |\n| int_type_description        | Transaction type description               | varchar(255) |\n| int_status                  | Transaction status,NEW or PROCESSED        | varchar(55)  |\n| int_user                    | User/entity who registered the transaction | varchar(255) |\n| int_timestamp               | Timestamp registered                       | timestamp    |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Gettransactions.in.json",
                "out": "./lib/schemas/Gettransactions.out.json"
            }
        },
        "Getcontactpersons": {
            "main": "./lib/triggers/Getcontactpersons.js",
            "title": "Get contact persons",
            "description": "This api is used to sync contact persons with WorkorderApp. A contact person should always be related to a certain client.\n`cpn_code` is used as a unique reference to either insert or update the address.\nEach address record can contain the following data:\n\n| Parameter                 | Description                                                                 | Required | Type (size)   |\n|---------------------------|-----------------------------------------------------------------------------|----------|---------------|\n| cpn_debtor_nr             | Debtor number of the relation                                               | Y        | Varchar (255) |\n| cpn_code                  | Unique code of the contact person. Used as reference in the workorder.      | Y        | Varchar (255) |\n| cpn_name                  | Name of the contact person.                                                 | Y        | Varchar (255) |\n| cpn_phone                 | Phone of the contact person.                                                | N        | Varchar (255) |\n| cpn_email                 | Email of the contact person.                                                | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getcontactpersons.in.json",
                "out": "./lib/schemas/Getcontactpersons.out.json"
            }
        },
        "Getcontactbyfilter": {
            "main": "./lib/triggers/Getcontactbyfilter.js",
            "title": "Get contact by filter",
            "description": "This api is used to fetch contactpersons based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getcontactbyfilter.in.json",
                "out": "./lib/schemas/Getcontactbyfilter.out.json"
            }
        },
        "Getgeneric_notes": {
            "main": "./lib/triggers/Getgeneric_notes.js",
            "title": "Get generic_notes",
            "description": "This api is used to sync contact persons with WorkorderApp. A contact person should always be related to a certain client.\n`cpn_code` is used as a unique reference to either insert or update the address.\nEach address record can contain the following data:\n\n| Parameter                 | Description                                                                 | Required | Type (size)   |\n|---------------------------|-----------------------------------------------------------------------------|----------|---------------|\n| cpn_debtor_nr             | Debtor number of the relation                                               | Y        | Varchar (255) |\n| cpn_code                  | Unique code of the contact person. Used as reference in the workorder.      | Y        | Varchar (255) |\n| cpn_name                  | Name of the contact person.                                                 | Y        | Varchar (255) |\n| cpn_phone                 | Phone of the contact person.                                                | N        | Varchar (255) |\n| cpn_email                 | Email of the contact person.                                                | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Getgeneric_notes.in.json",
                "out": "./lib/schemas/Getgeneric_notes.out.json"
            }
        }
    },
    "actions": {
        "Addemployees": {
            "main": "./lib/actions/Addemployees.js",
            "title": "Add employees",
            "description": "This api is used to get or edit employees in WorkorderApp.\nEach employee record can contain the following data:\n\n| Parameter  | Required | Type (size)   |\n|------------|----------|---------------|\n| firstname  | Y        | Varchar (255) |\n| lastname   | Y        | Varchar (255) |\n| number     | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addemployees.in.json",
                "out": "./lib/schemas/Addemployees.out.json"
            }
        },
        "Addprojects": {
            "main": "./lib/actions/Addprojects.js",
            "title": "Add projects",
            "description": "This api is used to sync external projects with WorkorderApp.\nEach project record can contain the following data:\n\n| Parameter        | Required | Type (size)     |\n|------------------|----------|-----------------|\n| code             | Y        | Varchar (255)   |\n| code_ext         | N        | Varchar (255)   |\n| debtor_number    | Y        | Varchar (255)   |\n| status           | Y        | Varchar (255)   |\n| name             | Y        | Varchar (255)   |\n| description      | N        | Text            |\n| progress         | N        | Integer         |\n| date_start       | Y        | Varchar (255)   |\n| date_end         | N        | Varchar (255)   |\n| active           | N        | Integer (1 or 0)|",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addprojects.in.json",
                "out": "./lib/schemas/Addprojects.out.json"
            }
        },
        "PostAddprojects": {
            "main": "./lib/actions/PostAddprojects.js",
            "title": "Add projects",
            "description": "This api is used to sync external projects with WorkorderApp.\nEach project record can contain the following data:\n\n| Parameter        | Required | Type (size)     |\n|------------------|----------|-----------------|\n| code             | Y        | Varchar (255)   |\n| code_ext         | N        | Varchar (255)   |\n| debtor_number    | Y        | Varchar (255)   |\n| status           | Y        | Varchar (255)   |\n| name             | Y        | Varchar (255)   |\n| description      | N        | Text            |\n| progress         | N        | Integer         |\n| date_start       | Y        | Varchar (255)   |\n| date_end         | N        | Varchar (255)   |\n| active           | N        | Integer (1 or 0)|",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PostAddprojects.in.json",
                "out": "./lib/schemas/PostAddprojects.out.json"
            }
        },
        "Addtasks": {
            "main": "./lib/actions/Addtasks.js",
            "title": "Add tasks",
            "description": "This api is used to sync tasks with OutSmart.\nEach task record can contain the following data:\n\n| Parameter               | Required | Description                                                |\n|-------------------------|----------|------------------------------------------------------------|\n| tsk_tsk_id              | N        | Parent tasks ID                                            |\n| tsk_type                | Y        | Type should be `TASK`                                      |\n| tsk_name                | Y        | Name description of the task                               |\n| tsk_description         | N        | Long description, can contain HTML format                  |\n| tsk_reference           | Y        | External reference used to update same task in the future  |\n| tsk_category            | Y        | Category used to group in OutSmart in general CALL or MAIL |\n| tsk_icon                | N        | Icon used phone-square and envelope-o                      |\n| tsk_owner               | N        | Employee number of the owner                               |\n| tsk_assigned_to         | N        | Employee number of the assignee                            |\n| tsk_priority            | Y        | LOW, NORMAL, HIGH                                          |\n| tsk_status              | Y        | YET_TO_START,IN_PROGRESS,COMPLETED,EXPIRED,CLOSED          |\n| tsk_debtor_nr           | N        | Connected customer debtor number                           |\n| tsk_address_nr          | N        | Connected address code                                     |\n| tsk_contact_nr          | N        | Connected contactperson code                               |\n| tsk_timestamp_due       | N        | Timestamp due                                              |\n| tsk_timestamp_create    | N        | Timestamp created                                          |\n| tsk_timestamp_mutate    | N        | Timestamp mutated                                          |\n| tsk_timestamp_started   | N        | Timestamp started                                          |\n| tsk_timestamp_completed | N        | Timestamp completed                                        |\n| tsk_timestamp_start     | N        | Timestamp start                                            |\n| tsk_link                | N        | Link(href) to be rendered in the UI                        |\n| tsk_project_nr          | N        | Connected project number                                   |\n| tsk_project_activity_nr | N        | Connected project activity number                          |\n| tsk_order_nr            | N        | Connected work order number                                |\n| tsk_invoice_number      | N        | Connected invoice number                                   |\n| tsk_quotation_number    | N        | Connected quotation number                                 |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addtasks.in.json",
                "out": "./lib/schemas/Addtasks.out.json"
            }
        },
        "Addcategories": {
            "main": "./lib/actions/Addcategories.js",
            "title": "Add categories",
            "description": "This api is used to categories with WorkorderApp.\nEach category record can contain the following data:\n\n| Parameter                 | Description                                   | Required | Type (size)   |\n|---------------------------|-----------------------------------------------|----------|---------------|\n| cat_code                  | Category code                                 | Y        | Varchar (255) |\n| cat_cat_code              | Parent category code part                     | N        | Varchar (255) |\n| cat_name                  | Category name                                 | Y        | Varchar (255) |\n| cat_image                 | Url of the image. POST: An external url should be provided.  GET: You will receive a workorderapp url.     | N        | Varchar (255)      |\n| cat_display               | Indication if the category should be displayed| Y        | Int (10)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addcategories.in.json",
                "out": "./lib/schemas/Addcategories.out.json"
            }
        },
        "Addhourtypes": {
            "main": "./lib/actions/Addhourtypes.js",
            "title": "Add hourtypes",
            "description": "This api is used to sync external hourtypes with WorkorderApp.\nEach hourtype record can contain the following data:\n\n| Parameter        | Required | Type (size)         |\n|------------------|----------|---------------------|\n| code             | Y        | Varchar (255)       |\n| name             | Y        | Varchar (255)       |\n| cost_booking     | Y        | Integer (1 or 0)    |\n| sale_booking     | Y        | Integer (1 or 0)    |\n| sale_price       | Y        | Decimal (> 0)       |\n| cost_price       | N        | Decimal (> 0)       | \n| active           | N        | Integer (1 or 0)    |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addhourtypes.in.json",
                "out": "./lib/schemas/Addhourtypes.out.json"
            }
        },
        "Addmaterialcategories": {
            "main": "./lib/actions/Addmaterialcategories.js",
            "title": "Add material categories",
            "description": "This api is used to sync material categories with WorkorderApp.\nEach material_categories record can contain the following data:\n\n| Parameter                 | Description                                   | Required | Type (size)   |\n|---------------------------|-----------------------------------------------|----------|---------------|\n| mct_mat_code              | Material code                                 | Y        | Varchar (255) |\n| mct_cat_code              | Category code                                 | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addmaterialcategories.in.json",
                "out": "./lib/schemas/Addmaterialcategories.out.json"
            }
        },
        "Addrelations": {
            "main": "./lib/actions/Addrelations.js",
            "title": "Add relations",
            "description": "This api is used to sync external contacts with WorkorderApp.\nEach relation record can contain the following data:\n\n| Parameter        | Required | Type (size)   |\n|------------------|----------|---------------|\n| name             | Y        | Varchar (255) |\n| debtor_number    | Y        | Varchar (255) |\n| contact          | N        | Varchar (255) |\n| phone_number     | N        | Varchar (255) |\n| email            | N        | Varchar (255) |\n| email_workorder  | N        | Varchar (255) |\n| street           | Y        | Varchar (255) |\n| house_number     | N        | Varchar (255) |\n| postal_code      | Y        | Varchar (255) |\n| city             | Y        | Varchar (255) |\n| remark           | N        | Text (64kb)   |\n| latitude         | N        | Float (10,6)  |\n| longitude        | N        | Float (10,6)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addrelations.in.json",
                "out": "./lib/schemas/Addrelations.out.json"
            }
        },
        "Addmaterials": {
            "main": "./lib/actions/Addmaterials.js",
            "title": "Add materials",
            "description": "This api is used to sync materials with WorkorderApp.\nEach material record can contain the following data:\n\n| Parameter    | Required | Type (size)   |\n|--------------|----------|---------------|\n| code         | Y        | Varchar (255) |\n| description  | Y        | Text (64kb)   |\n| price        | Y        | Decimal       |\n| unit         | Y        | Varchar (255) |\n| eancode      | N        | Varchar (55)  |\n| barcode      | N        | Varchar (55)  |\n| freefield1   | N        | Varchar (255) |\n| freefield2   | N        | Varchar (255) |\n| freefield3   | N        | Varchar (255) |\n| freefield4   | N        | Varchar (255) |\n| freefield5   | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addmaterials.in.json",
                "out": "./lib/schemas/Addmaterials.out.json"
            }
        },
        "Addvalues": {
            "main": "./lib/actions/Addvalues.js",
            "title": "Add values",
            "description": "This api is used to sync materials with WorkorderApp.\nEach material record can contain the following data:\n\n| Parameter    | Required | Type (size)   |\n|--------------|----------|---------------|\n| code         | Y        | Varchar (255) |\n| description  | Y        | Text (64kb)   |\n| price        | Y        | Decimal       |\n| unit         | Y        | Varchar (255) |\n| eancode      | N        | Varchar (55)  |\n| barcode      | N        | Varchar (55)  |\n| freefield1   | N        | Varchar (255) |\n| freefield2   | N        | Varchar (255) |\n| freefield3   | N        | Varchar (255) |\n| freefield4   | N        | Varchar (255) |\n| freefield5   | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addvalues.in.json",
                "out": "./lib/schemas/Addvalues.out.json"
            }
        },
        "Addforms": {
            "main": "./lib/actions/Addforms.js",
            "title": "Add forms",
            "description": "This api is used to sync external forms with WorkorderApp.\nEach form record can contain the following data:\n\n| Parameter | Description                          | Required | Type (size)   |\n|-----------|--------------------------------------|----------|---------------|\n| name      | Name of the form                     | Y        | Varchar (255) |\n| data      | JSON data of the form                | N        | Text (64kb)   |\n| template  | HTML template to display data in PDF | N        | Text (64kb)   |\n\n\nThe `data` parameters contains a JSON encoded representation of the form. The main element is called `fields` and contains an array of JSON objects representing a `field`.\nEach field contains the following data:\n\n| Parameter | Description |\n|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| label | The label of the field. |\n| field_type | The Type of the field. Can be `text`, `checkboxes`, `radio` , `dropdown` or `signature`. |\n| required | This field indicates if the field is required to complete. Text: Field is valid a value is filled. Checkboxes: Field is valid when all the boxes are checked. Radio: Field is valid when a option is checked. Dropdown: Field is valid when a option is selected. Signature: Field is valid when a signature is set |\n| cid | Unique indentification of the field. |\n| field_options | Array containing field options. See description below. |\n\nEach field_options contains the following data:\n\n|Parameter | Description |\n|-----------------|-------------------------------------------------------------------------------------------------|\n|--------------- | ----------------------------------------------------------------------------------------------- |\n|options | The options of the field. Used in `checkboxes`, `radio` , `dropdown`. See decription below |\n|value | Value added in `text` field or base64 encoded image in `signature` field. |\n\nEach options contains the following data\n\n| Parameter | Description |\n|-----------------|-------------------------------------------------------------------------------------|\n| --------------- | ----------------------------------------------------------------------------------- |\n| checked | Indicated if options is selected. Used in `checkboxes`, `radio` , `dropdown`. |\n| label | Label for the option |\n\n+ Sample JSON\n    + Text:` {\n      \"label\": \"Serienummer\",\n      \"field_type\": \"text\",\n      \"required\": true,\n      \"field_options\": {\n        \"size\": \"small\",\n        \"value\": \"\"\n      },\n      \"cid\": \"c6\"\n    }` \n    + Radio: ` {\n      \"label\": \"Type pomp\",\n      \"field_type\": \"radio\",\n      \"required\": true,\n      \"field_options\": {\n        \"options\": [\n          {\n            \"label\": \"type A\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type B\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type C\",\n            \"checked\": false\n          }\n        ]\n      },\n      \"cid\": \"c2\"\n    }`\n    + Checkboxes: ` {\n      \"label\": \"Type pomp\",\n      \"field_type\": \"checkboxes\",\n      \"required\": true,\n      \"field_options\": {\n        \"options\": [\n          {\n            \"label\": \"type A\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type B\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"type C\",\n            \"checked\": false\n          }\n        ]\n      },\n      \"cid\": \"c2\"\n    }`\n    + Dropdown: ` {\n      \"label\": \"Dropdown\",\n      \"field_type\": \"dropdown\",\n      \"required\": true,\n      \"field_options\": {\n        \"options\": [\n          {\n            \"label\": \"A\",\n            \"checked\": false\n          },\n          {\n            \"label\": \"B\",\n            \"checked\": false\n          }\n        ],\n        \"include_blank_option\": false\n      },\n      \"cid\": \"c10\"\n    }`\n    + Signature: `{\n      \"cid\": \"c5\",\n      \"field_options\": {\n        \"value\": \"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\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW9D/A4B7ViPrMDeYAAAAAElF\\nTkSuQmCC\\n\"\n      },\n      \"field_type\": \"signature\",\n      \"label\": \"Naamloos\",\n      \"required\": true\n    }`",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addforms.in.json",
                "out": "./lib/schemas/Addforms.out.json"
            }
        },
        "TimeSheet_Expenses_Addexpenses": {
            "main": "./lib/actions/TimeSheet_Expenses_Addexpenses.js",
            "title": "TimeSheet - Expenses  - Add expenses",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TimeSheet_Expenses_Addexpenses.in.json",
                "out": "./lib/schemas/TimeSheet_Expenses_Addexpenses.out.json"
            }
        },
        "TimeSheet_Travel_Addtravel": {
            "main": "./lib/actions/TimeSheet_Travel_Addtravel.js",
            "title": "TimeSheet - Travel - Add travel",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TimeSheet_Travel_Addtravel.in.json",
                "out": "./lib/schemas/TimeSheet_Travel_Addtravel.out.json"
            }
        },
        "TimeSheet_Hours_Addhours": {
            "main": "./lib/actions/TimeSheet_Hours_Addhours.js",
            "title": "TimeSheet - Hours - Add hours",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TimeSheet_Hours_Addhours.in.json",
                "out": "./lib/schemas/TimeSheet_Hours_Addhours.out.json"
            }
        },
        "Notes_Addnote": {
            "main": "./lib/actions/Notes_Addnote.js",
            "title": "Notes - Add note",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Notes_Addnote.in.json",
                "out": "./lib/schemas/Notes_Addnote.out.json"
            }
        },
        "Postlocations": {
            "main": "./lib/actions/Postlocations.js",
            "title": "Post locations",
            "description": "This api is used to get the locations of connected devices from WorkorderApp or post locations for certain identifiers. An identifier can be anything, for example employee nr or license plate. When posting a location the type should be specified.\nPost data should contain an array with objects containing the following parameters:\n\n| Parameter                 | Description                                                       | \n|---------------------------|-------------------------------------------------------------------|  \n| lat                       | Latitude                                                          |  \n| long                      | Longitude                                                         |  \n| identifier                | Unique identifier, for example employee number or license plate.  |  \n| type                      | 0 for employee, 1 for car                                         |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Postlocations.in.json",
                "out": "./lib/schemas/Postlocations.out.json"
            }
        },
        "Expensecategories_Add": {
            "main": "./lib/actions/Expensecategories_Add.js",
            "title": "Expense categories - Add",
            "description": "This api is used to fetch addresses based on a filter. \nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1\nAdding multiple filters: &key[]=key1&value[]=value1&key[]=key2&value[]=value2",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Expensecategories_Add.in.json",
                "out": "./lib/schemas/Expensecategories_Add.out.json"
            }
        },
        "Addworktypes": {
            "main": "./lib/actions/Addworktypes.js",
            "title": "Add worktypes",
            "description": "This api is used to sync  worktypes with WorkorderApp.\nEach worktype record can contain the following data:\n\n| Parameter                 | Description                       | Required | Type (size)   |\n|---------------------------|-----------------------------------|----------|---------------|\n| wrt_name                  | Name                              | Y        | Varchar (255) |\n| wrt_description           | Description                       | Y        | Varchar (255) |\n| wrt_default_minutes       | Default minutes used for planning | Y        | Int (10) |\n| wrt_active                | Indicates if worktype is active   | Y        | Int (10)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addworktypes.in.json",
                "out": "./lib/schemas/Addworktypes.out.json"
            }
        },
        "Addpriorities": {
            "main": "./lib/actions/Addpriorities.js",
            "title": "Add priorities",
            "description": "This api is used to sync priorities with WorkorderApp.\nEach priority record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the priority. The employee can edit this when added to a work order. | Y        | Varchar (255) | \n| app_enabled               | Indication if the priority should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addpriorities.in.json",
                "out": "./lib/schemas/Addpriorities.out.json"
            }
        },
        "Adderrors": {
            "main": "./lib/actions/Adderrors.js",
            "title": "Add errors",
            "description": "This api is used to sync errors with WorkorderApp.\nEach error record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the error. The employee can edit this when added to a work order. | Y        | Varchar (255) | \n| app_enabled               | Indication if the error should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Adderrors.in.json",
                "out": "./lib/schemas/Adderrors.out.json"
            }
        },
        "Addsolutions": {
            "main": "./lib/actions/Addsolutions.js",
            "title": "Add solutions",
            "description": "This api is used to sync solutions with WorkorderApp.\nEach solution record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the solution. The employee can edit this when added to a work order. | Y        | Varchar (255) | \n| app_enabled               | Indication if the solution should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addsolutions.in.json",
                "out": "./lib/schemas/Addsolutions.out.json"
            }
        },
        "Addpaymentmethods": {
            "main": "./lib/actions/Addpaymentmethods.js",
            "title": "Add paymentmethods",
            "description": "This api is used to sync paymentmethods with WorkorderApp.\nEach paymentmethods record can contain the following data:\n\n| Parameter                 | Description                       | Required | Type (size)   |\n|---------------------------|-----------------------------------|----------|---------------|\n| pmd_description           | Description                       | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addpaymentmethods.in.json",
                "out": "./lib/schemas/Addpaymentmethods.out.json"
            }
        },
        "Addregions": {
            "main": "./lib/actions/Addregions.js",
            "title": "Add regions",
            "description": "This api is used to sync regions with WorkorderApp.\nEach region record can contain the following data:\n\n| Parameter                 | Description               | Required | Type (size)   |\n|---------------------------|---------------------------|----------|---------------|\n| reg_code                  | Unique code               | Y        | Varchar (255) | \n| reg_name                  | Name of the region.       | Y        | Varchar (255) | \n| reg_zip_start             | Zip start of the region.  | N        | Integer (11) | \n| reg_zip_end               | Zip end of the region.    | N        | Integer (11) | \n| reg_city                  | City of the region.       | N        | Varchar (255) | \n| reg_country               | Country of the region.    | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addregions.in.json",
                "out": "./lib/schemas/Addregions.out.json"
            }
        },
        "Addvehicles": {
            "main": "./lib/actions/Addvehicles.js",
            "title": "Add vehicles",
            "description": "This api is used to sync vehicles with WorkorderApp.\nEach vehicle record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| veh_license_plate         | Unique  license plate                                                                 | Y        | Varchar (255) | \n| veh_title               | Title of the vehicle | Y        | Varchar (255) | \n| veh_brand               | Brand of the vehicle  | N        | Varchar (255) | \n| veh_model               |  Model of the vehicle| N        | Varchar (255) | \n| veh_type               | Type of the vehicle. | N        | Varchar (255) | \n| veh_image               | Url of the image . POST: An external url should be provided.  GET: You will receive a workorderapp url.    | Y        |   | \n| veh_driver               | Driver of the vehicle. This us a reference to the employee number | N        | Varchar (255) | \n| veh_driving               | Indication if the vehicle is driving. When the value is set to 1 it will be shown in the planbord. | N        | Integer (11) | \n| veh_active               | Indication if the vehicle is active                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addvehicles.in.json",
                "out": "./lib/schemas/Addvehicles.out.json"
            }
        },
        "Addwarehouses": {
            "main": "./lib/actions/Addwarehouses.js",
            "title": "Add warehouses",
            "description": "This api is used to sync vehicles with WorkorderApp.\nEach vehicle record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| veh_license_plate         | Unique  license plate                                                                 | Y        | Varchar (255) | \n| veh_title               | Title of the vehicle | Y        | Varchar (255) | \n| veh_brand               | Brand of the vehicle  | N        | Varchar (255) | \n| veh_model               |  Model of the vehicle| N        | Varchar (255) | \n| veh_type               | Type of the vehicle. | N        | Varchar (255) | \n| veh_image               | Url of the image . POST: An external url should be provided.  GET: You will receive a workorderapp url.    | Y        |   | \n| veh_driver               | Driver of the vehicle. This us a reference to the employee number | N        | Varchar (255) | \n| veh_driving               | Indication if the vehicle is driving. When the value is set to 1 it will be shown in the planbord. | N        | Integer (11) | \n| veh_active               | Indication if the vehicle is active                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addwarehouses.in.json",
                "out": "./lib/schemas/Addwarehouses.out.json"
            }
        },
        "Addmaterial_types": {
            "main": "./lib/actions/Addmaterial_types.js",
            "title": "Add material_types",
            "description": "This api is used to sync material types with WorkorderApp.\nEach material type record can contain the following data:\n\n| Parameter                 | Description                                                                         | Required | Type (size)   |\n|---------------------------|-------------------------------------------------------------------------------------|----------|---------------|\n| code                      | Unique code                                                                         | Y        | Varchar (255) | \n| description               | Description of the material type.  | Y        | Varchar (255) | \n| app_enabled               | Indication if the material type should be visible in the app                             | N        | Integer (11)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addmaterial_types.in.json",
                "out": "./lib/schemas/Addmaterial_types.out.json"
            }
        },
        "Addworkstatusses": {
            "main": "./lib/actions/Addworkstatusses.js",
            "title": "Add workstatusses",
            "description": "This api is used to sync workstatusses with WorkorderApp.\nEach workstatusses record can contain the following data:\n\n| Parameter                 | Description                       | Required | Type (size)   |\n|---------------------------|-----------------------------------|----------|---------------|\n| sta_code                  | Code                              | Y        | Varchar (255) | \n| sta_name                  | Name                              | Y        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addworkstatusses.in.json",
                "out": "./lib/schemas/Addworkstatusses.out.json"
            }
        },
        "Addaddresses": {
            "main": "./lib/actions/Addaddresses.js",
            "title": "Add addresses",
            "description": "This api is used to sync addresses with WorkorderApp. An address should always be related to a certain client and can have a main contact person associated with it.\n`adr_code` is used as a unique reference to either insert or update the address.\nEach address record can contain the following data:\n\n| Parameter                 | Description                                                                 | Required | Type (size)   |\n|---------------------------|-----------------------------------------------------------------------------|----------|---------------|\n| adr_debtor_nr             | Debtor number of the relation                                               | Y        | Varchar (255) |\n| adr_code                  | Unique code of the address. Used as reference in the workorder.             | Y        | Varchar (255) |\n| adr_cpn_code              | Contact person code of the address                                          | N        | Varchar (255) |\n| adr_line_1                | Address line. Usually street and number.                                    | Y        | Varchar (255) |\n| adr_zip                   | Zipcode of the address                                                      | Y        | Varchar (255) |\n| adr_city                  | City of the adress                                                          | Y        | Varchar (255) |\n| adr_country               | Country of the address                                                      | N        | Varchar (255) |\n| adr_remark                | Remark of the address                                                       | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addaddresses.in.json",
                "out": "./lib/schemas/Addaddresses.out.json"
            }
        },
        "Addparts": {
            "main": "./lib/actions/Addparts.js",
            "title": "Add parts",
            "description": "This api is now deprecated. Use materials to register the parts of certain objects.\nThis api is used to sync parts with WorkorderApp.\nEach part record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| prt_code                  | Unique code of the parts. Used as reference for other entities                                                         | Y        | Varchar (255) |\n| prt_name                  | Part name/description name                                                                                                             | Y        | Varchar (255) |\n| prt_sup_code              | Supplier code                                                                                                             | Y        | Varchar (255) |\n| prt_value                 | Value of a parts                                                                                                             | Y        | Varchar (255) |\n| prt_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.     | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addparts.in.json",
                "out": "./lib/schemas/Addparts.out.json"
            }
        },
        "Addobjectparts": {
            "main": "./lib/actions/Addobjectparts.js",
            "title": "Add object parts",
            "description": "This api is used to sync object parts with WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section. Allowed columns: `opr_obj_code` `opr_prt_code` `opr_serial_number`\nEach object_part record can contain the following data:\n\n| Parameter                         | Description                                           | Required | Type (size)   |\n|-----------------------------------|-------------------------------------------------------|----------|---------------|\n| opr_obj_code                      | Object code                                           | Y        | Varchar (255) |\n| opr_prt_code                      | Object part (Artikelcode from items in materials)     | Y        | Varchar (255) |\n| opr_serial_number                 | Serial number of parts used in object                 | N        | Varchar (255) |\n| opr_amount                        | Amount of parts used in object                        | Y        | Int (10)      |\n| opr_timestamp_installation        | Date of installing (Y-m-d)                            | N        | Date       |\n| opr_warranty_months               | Amount of months, used to calculate expiration date.  | N        | Int (10)      |\n| opr_timestamp_warranty_expires    | Warranty expiration date, automatically calculated based on installation date and the warranty months    | N        | Varchar (255)      |\n| val_value_1                       | Freefield value 1                                     | N        | Varchar (255)      |\n| val_value_2  - val_value_20       | Freefield value 2  till 20                            | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addobjectparts.in.json",
                "out": "./lib/schemas/Addobjectparts.out.json"
            }
        },
        "Postworkorders": {
            "main": "./lib/actions/Postworkorders.js",
            "title": "Post workorders",
            "description": "This api is used to post one or more workorders to WorkorderApp.\nA workorder can contain the following data:\n\n| Parameter                    | Detail                                                                                                     | Required | Type (size)   |\n|------------------------------|------------------------------------------------------------------------------------------------------------|----------|---------------|\n| WorkorderNo                  | Unique number from ERP/CRM                                                                                 | Yes      | Varchar (255) |\n| ProjectNr                    | Internal Project number                                                                                    | No       | Varchar (255) |\n| ExternProjectNr              | External Project number                                                                                    | No       | Varchar (255) |\n| CustomerName                 | Customer name                                                                                              | Yes      | Varchar (255) |\n| CustomerDebtorNr             | Customer Debtor number                                                                                     | Yes      | Varchar (255) |\n| CustomerStreet               | Customer street                                                                                            | Yes      | Varchar (255) |\n| CustomerStreetNo             | Customer street number                                                                                     | No       | Varchar (255) |\n| CustomerEmail                | Customer Email                                                                                             | No       | Varchar (255) |\n| CustomerZIP                  | Customer zip code                                                                                          | Yes      | Varchar (255) |\n| CustomerCity                 | Customer city                                                                                              | Yes      | Varchar (255) |\n| CustomerContactPerson        | Customer contact person                                                                                    | Yes      | Varchar (255) |\n| CustomerPhone                | Customer phone number                                                                                      | No       | Varchar (255) |\n| CustomerRemark               | Customer remark                                                                                            | No       | Text (64kb)   |\n| CustomerLatitude             | Latitude of work location, used for navigation and to display on maps.                                     | No       | Float(10,6)   |\n| CustomerLongitude            | Longitude of work location, used for navigation and to display on maps.                                    | No       | Float(10,6)   |\n| CustomerNameInvoice          | Invoice customer name                                                                                      | Yes      | Varchar (255) |\n| CustomerDebtorNrInvoice      | Invoice customer debtor number                                                                             | Yes      | Varchar (255) |\n| CustomerStreetInvoice        | Invoice customer street name                                                                               | Yes      | Varchar (255) |\n| CustomerStreetNoInvoice      | Invoice customer street number                                                                             | No       | Varchar (255) |\n| CustomerEmailInvoice         | Invoice customer email                                                                                     | No       | Varchar (255) |\n| CustomerZIPInvoice           | Invoice customer zip code                                                                                  | Yes      | Varchar (255) |\n| CustomerCityInvoice          | Invoice customer city                                                                                      | Yes      | Varchar (255) |\n| CustomerContactPersonInvoice | Invoice customer contact person                                                                            | Yes      | Varchar (255) |\n| CustomerPhoneInvoice         | Invoice customer phone number                                                                              | No       | Varchar (255) |\n| CustomerRemarkInvoice        | Invoice customer remark                                                                                    | No       | Text (64kb)   |\n| TypeOfWork                   | Installatie, Garantie, Levering, Onderhoud, Project, Regie, Reparatie,  Service, Storing, Verkoop, Verhuur | Yes      | Varchar (255) |\n| WorkDescription              | Work description of the workorder. Visible for customer when signing and when receiving the PDF.           | No       | Text (64kb)   |\n| InternalWorkDescription      | Internal work description of the workorder. Only visible for the employee                                  | No       | Text (64kb)   |\n| PaymentMethod                | niet van toepassing, op rekening, contact voldaan, pin betaling, conform offerte                           | Yes      | Varchar (255) |\n| EmployeeNr                   | Employee Number                                                                                            | No       | Varchar (255) |\n| WorkDate                     | Scheduled date for work (d-m-Y)                                                                            | No       | Varchar (255) |\n| WorkTime                     | Scheduled time for work (H:i)                                                                              | No       | Varchar (255) |\n| WorkEndDate                  | Scheduled end date for work (d-m-Y)                                                                        | No       | Varchar (255) |\n| WorkEndTime                  | Scheduled end time for work (H:i)                                                                          | No       | Varchar (255) |\n| WorkDeadline                 | Scheduled deadline for the workorder.                                                                      | No       | Varchar (255) |\n| WorkDuration                 | Duration of the workorder (in minutes). Used to fill WorkEndDate and WorkEndTime based on WorkDate and WorkTime.        | No       | Integer   |\n| WorkStatus                   | Internal work status code. Can be added through status API.                                                | No       | Varchar (255) |\n| PickupPlanning               | Indication if the work order should be added to batch to be picked up. Value should be 0 or 1.             | No       | Integer       |\n| WebPlanning                  | Indication if webplanning is enabled for this order.                                                       | No       | Integer       |\n| CpnCode                      | Contact person code                                                                                        | No       | Varchar (255) |\n| AdrCode                      | Address code                                                                                               | No       | Varchar (255) |\n| ShortWorkDescription         | Short work description. For example 1 line to show in an overview                                          | No       | Varchar (255) |\n| Comment                      | Additional field for the employee to leave their comment                                                   | No       | Varchar (255) |\n| ErrorCode                    | Selected code as added in the errors API                                                                   | No       | Varchar (255) |\n| ErrorMessage                 | Message corresponding to the selected Error, can be changed by the employee                                | No       | Varchar (255) |\n| SolutionCode                 | Selected code as added in the solutions API                                                                | No       | Varchar (255) |\n| SolutionMessage              | Message corresponding to the selected Solution, can be changed by the employee                             | No       | Varchar (255) |\n| PriorityCode                 | Selected code as added in the priorities API                                                               | No       | Varchar (255) |\n| PriorityMessage              | Message corresponding to the selected Priority, can be changed by the employee                             | No       | Varchar (255) |\n| MinimumHours                 | Minimum amount of hours that the customer should sign for. For example: The customer should always sign for 2 hours. If the employee only registers 25 minutes the customer still gets to see 2 hours.                | No       | Decimal (7,2) |\n| RoundingAmount               | Amount of minutes that the total time should be rounded to. For exammple: Your company only works with amounts of 30 minutes. If the user only registers 40 minutes the customer will have to sign for 60 minutes.                | No       | Varchar (255) |\n| Attachments                  | An array containing multiple files. See specification below.                                               | No       | Array         |\n| Materials                    | An array containing material rows. See specification below.                                                | No       | Array         |\n| Workperiods                  | An array containing workperiod rows. See specification below.                                              | No       | Array         |\n| Forms                        | Array of forms. Each row contains Name, Data and ObjectCode                                                | No       | Array         |\n| Employees                    | Array of employee numbers.                                                                                 | No       | Array         |\n| WorkObjects                  | Array of objects codes.                                                                                    | No       | Array         |\n\nAttachments specification\n\n| Parameter | Detail                                                                                        | Required | Type (size)   |\n|-----------|-----------------------------------------------------------------------------------------------|----------|---------------|\n| File      | URL of the attachment file. This has to be an existing file. The file is saved on our server. | No       | Varchar (255) |\n| Data      | Base64 encoded file data.                                                                     | No       | Base64        |\n| FileName  | Filename of the Base64 encoded data.                                                          | No       | Varchar (255) |\n\nAn attachment can be added by providing a valid URL or by providing Base64 encoded data and filename.\nMaterial specification\n\n| Parameter     | Detail                                                             | Required | Type          |\n|---------------|--------------------------------------------------------------------|----------|---------------|\n| MaterialCode  | Article number, code or barcode of this material. Example: A786878 | Yes      | Varchar (255) |\n| MaterialNr    | Amount of this material used. Example: 1                           | Yes      | Decimal       |\n| MaterialPrice | Price of this material. Example: 0,00                              | Yes      | Decimal       |\n| MaterialName  | Material name and/or description. Example: Kleinmateriaal          | Yes      | Varchar (255) |\n| MaterialUnit  | Unit of this material. Example: M2                                 | No       | Varchar (255) |\n| MaterialType  | User defined material type                                         | No       | Varchar (255) |\n| MaterialFreeField1  | User defined field 1                                         | No       | Varchar (255) |\n| MaterialFreeField2  | User defined field 2                                         | No       | Varchar (255) |\n| MaterialFreeField3  | User defined field 3                                         | No       | Varchar (255) |\n| MaterialFreeField4  | User defined field 4                                         | No       | Varchar (255) |\n| MaterialFreeField5  | User defined field 5                                         | No       | Varchar (255) |\n\nWorkperiod specification\n\n| Parameter     | Detail                                                    | Required  | Type          |\n|---------------|-----------------------------------------------------------|-----------|---------------|\n| WorkDate      | Date specified in d-m-Y                                   | Yes       | Varchar (255) |\n| BeginTime     | Time specified in H:i                                     | Yes       | Varchar (255) |\n| EndTime       | Time specified in H:i                                     | Yes       | Varchar (255) |\n| Break         | Break time in minutes                                     | No        | Int (11)      |\n| TotalTime     | Sum of EndTime - BeginTime - Break formatted in H:i       | Yes       | Varchar (255) |\n| Travel        | Travel distance                                           | No        | Int (11)      |\n| WorkRemark    | Work remark                                               | No        | Text          |\n| HourType      | Hour type code                                            | No        | Varchar (55)  |\n| EmployeeNr    | Employee nunber                                           | No        | Varchar (55)  |\n\nExample array:\n``` json\n\"Workperiods\": [\n    {\n        \"BeginTime\": \"08:30\",\n        \"TotalTime\": \"03:45\",\n        \"WorkRemark\": \"\",\n        \"WorkDate\": \"26-09-2013\",\n        \"EndTime\": \"12:15\",\n        \"Travel\": \"1\",\n        \"EmployeeNr\":\"11\",\n        \"HourType\":\"001\"\n    }\n] \n```\nForms specification\n\n| Parameter     | Detail                                                                                                                                | Required | Type          |\n|---------------|---------------------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| Name          | Name of the form. Will be visible to employee and used to search for data.                                                            | Yes      | Varchar (255) |\n| Data          | JSON data of the Form elements. See forms API for description. When this is empty we will use the name to lookup a predefined form.   | No      | Text (64kb)    |\n| ObjectCode    | Object connected to the form. We will search our list of object for the corresponding object.                                         | No      | Varchar (255)  |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Postworkorders.in.json",
                "out": "./lib/schemas/Postworkorders.out.json"
            }
        },
        "UpdateWorkorder_Materials_": {
            "main": "./lib/actions/UpdateWorkorder_Materials_.js",
            "title": "UpdateWorkorder (Materials)",
            "description": "This API is used to update an existing workorder. The row_id of workorder_no can be used to identify the specific workorder.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateWorkorder_Materials_.in.json",
                "out": "./lib/schemas/UpdateWorkorder_Materials_.out.json"
            }
        },
        "Addobject": {
            "main": "./lib/actions/Addobject.js",
            "title": "Add object",
            "description": "This api is used to sync objects with WorkorderApp.\nEach object record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| obj_code                  | Unique code of the object. Used as reference for other entities                                                           | Y        | Varchar (255) |\n| obj_sup_code              | Supplier code. Used as reference to supplier entity                                                                       | N        | Varchar (255) |\n| obj_debiteur_nummer       | Debtor number. Used as reference to customer clients.                                                                     | Y        | Varchar (255) |\n| obj_adr_code              | Address code. Used as a reference to the addres of a customer client.                                                     | N        | Varchar (255) |\n| obj_obj_code              | Parent object code.                                                                                                       | N        | Varchar (255) |\n| obj_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.               | N        | Varchar (255) |\n| obj_description           | Description of the object                                                                                                 | Y        | Varchar (255) |\n| obj_price                 | Price of the object                                                                                                       | N        | Decimal (7,2) |\n| obj_floor_level           | Floor level of the object                                                                                                 | N        | Int (10)      |\n| obj_location              | Textual description of the location of the object                                                                         | N        | Varchar (255) |\n| obj_latitude              | Latitude of the location of the object                                                                                    | N        | Float (10,6)  |\n| obj_longitude             | Longitude of the location of the object                                                                                   | N        | Float (10,6)  |\n| obj_type                  | Type                                                                                                                      | N        | Varchar (255) |\n| obj_model                 | Model                                                                                                                     | N        | Varchar (255) |\n| obj_brand                 | Brand                                                                                                                     | N        | Varchar (255) |\n| obj_date_warranty_expires | Expiration date of the warranty                                                                                           | N        | Varchar (255) |\n| obj_serialnumber          | Serialnumber of the object                                                                                                | N        | Varchar (255) |\n| obj_date_last_inspection  | Date of last inspection                                                                                                   | N        | Varchar (255) |\n| obj_date_installation     | Date of installation                                                                                                      | N        | Varchar (255) |\n| obj_freefield_1           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_2           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_3           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_4           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_5           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_6           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_7           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_8           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_9           |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_10          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_11          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_12          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_13          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_14          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_15          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_16          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_17          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_18          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_19          |                                                                                                                           | N        | Varchar (255) |\n| obj_freefield_20          |                                                                                                                           | N        | Varchar (255) |\n| obj_order                 | Sort order of an object                                                                                                   | N        | Int (10)      |\n| obj_created               | Timestamp of creating                                                                                                     | N        | DateTime      |\n| obj_modified              | Timestamp of modifying                                                                                                    | N        | DateTime      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addobject.in.json",
                "out": "./lib/schemas/Addobject.out.json"
            }
        },
        "Addsuppliers": {
            "main": "./lib/actions/Addsuppliers.js",
            "title": "Add suppliers",
            "description": "This api is used to sync suppliers with WorkorderApp.\nEach supplier record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| sup_code                  | Unique code of the supplier. Used as reference for other entities                                                         | Y        | Varchar (255) |\n| sup_name                  | Supplier name                                                                                                             | Y        | Varchar (255) |\n| sup_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.               | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addsuppliers.in.json",
                "out": "./lib/schemas/Addsuppliers.out.json"
            }
        },
        "Addfreefields": {
            "main": "./lib/actions/Addfreefields.js",
            "title": "Add freefields",
            "description": "This api is used to sync suppliers with WorkorderApp.\nEach supplier record can contain the following data:\n\n| Parameter                 | Description                                                                                                               | Required | Type (size)   |\n|---------------------------|---------------------------------------------------------------------------------------------------------------------------|----------|---------------|\n| sup_code                  | Unique code of the supplier. Used as reference for other entities                                                         | Y        | Varchar (255) |\n| sup_name                  | Supplier name                                                                                                             | Y        | Varchar (255) |\n| sup_image                 | Url of the image name. POST: An external url should be provided.  GET: You will receive a workorderapp url.               | N        | Varchar (255)      |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addfreefields.in.json",
                "out": "./lib/schemas/Addfreefields.out.json"
            }
        },
        "Updatequotation": {
            "main": "./lib/actions/Updatequotation.js",
            "title": "Update quotation",
            "description": "This api is used to fetch generated invoices from WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section.\n\n| Parameter                 | Description                                                                                           |\n|---------------------------|-------------------------------------------------------------------------------------------------------|\n| inv_id                    | Unique invoice ID  number of the invoice                                                              |\n| inv_worksheet_id          | Worksheet ID that is used to generate this invoice                                                    |\n| inv_quo_id                | Quotation ID that is used to generate this invoice                                                    |\n| inv_inv_id                | Parent invoice ID. Used when creating a credit invoice.                                               |\n| inv_type                  | Invoice type, can be DEBIT, CREDIT, CONCEPT_DEBIT or CONCEPT_CREDIT                                   |\n| inv_currency_code         | ISO 4217 currency code                                                                                |\n| inv_currency_symbol       | Currency symbol shown in the UI                                                                       |\n| inv_description           | Description of the invoice                                                                            |\n| inv_invoice_debtor_nr     | Debtor number of the assigned relation                                                                |\n| inv_invoice_debtor_name   | Debtor name of the assigned relation                                                                  |\n| inv_invoice_debtor_email  | Debtor e-mail of the assigned relation                                                                |\n| inv_number_numeric        | Invoice number numeric value                                                                          |\n| inv_number_formatted      | Pretty formatted invoice number                                                                       |\n| inv_status                | Invoice status, can be OPEN, PAYED, OVERDUE, REMINDER_1, REMINDER_2, REMINDER_3 or ...                |\n| inv_reference             | Reference, example purchase order number workorder number                                             |\n| inv_date                  | Invoice date                                                                                          |\n| inv_due_date              | Invoice due date                                                                                      |\n| inv_due_days              | Amount of due days. This days are added to the inv_date to calculate the inv_due_date.                |\n| inv_terms                 | Terms shown in the footer of the PDF.                                                                 |\n| inv_header                | Header shown on top of the PDF.                                                                       |\n| inv_amount                | Total amount including VAT.                                                                           |\n| inv_amount_excl           | Total amount excluding VAT.                                                                           |\n| inv_balance               | Total amounts of the transactions registered to this invoice.                                         |\n| inv_user_create           | User who created this invoice                                                                         |\n| inv_user_mutate           | User who mutated this invoice                                                                         |\n| inv_user_send             | User who marked this invoice as send.                                                                 |\n| inv_timestamp_create      | Timestamp of creation                                                                                 |\n| inv_timestamp_mutate      | Timestamp of mutating                                                                                 |\n| inv_timestamp_payed       | Timestamp when the invoice was marked as payed (inv_amount equal to inv_balance)                      |\n| inv_timestamp_send        | Timestamp of marking the invoice as send.                                                             |\n| iln_lines                 | Array of invoice lines.                                                                               |\n| invoice_debtor            | Invoice debtor.                                                                                       |\n| pdf                       | Temporary PDF url.                                                                                    |\n| ubl                       | Temporary ubl 2.0 url.                                                                                |\n\nInvoice line parameters\n\n| Parameter             | Description                                      |\n|-----------------------|--------------------------------------------------|\n| iln_id                | Line ID                                          |\n| iln_inv_id            | Invoice Id                                       |\n| iln_order             | Position of the line                             |\n| iln_material_code     | Material code                                    |\n| iln_material_hourtype | Hourtype code                                    |\n| iln_description       | Line description                                 |\n| iln_amount            | Line amount                                      |\n| iln_price             | Item price                                       |\n| iln_vat_percentage    | Vat percentage                                   |\n| iln_discount          | Discount percentage                              |\n| iln_total             | Total price excluding vat and discount           |\n| iln_total_discount    | Calculated discount amount                       |\n| iln_total_vat         | Calculated vat amount                            |\n| iln_total_excl        | Total price excluding vat and including discount |\n| iln_total_incl        | Total price including vat and including discount |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Updatequotation.in.json",
                "out": "./lib/schemas/Updatequotation.out.json"
            }
        },
        "PostPrices": {
            "main": "./lib/actions/PostPrices.js",
            "title": "Post Prices",
            "description": "This api is used to fetch generated quotations from WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PostPrices.in.json",
                "out": "./lib/schemas/PostPrices.out.json"
            }
        },
        "Updateinvoice": {
            "main": "./lib/actions/Updateinvoice.js",
            "title": "Update invoice",
            "description": "This api is used to fetch generated invoices from WorkorderApp.\nThe result can be filtered by using the advanced filter. As described in the introduction section.\n\n| Parameter                 | Description                                                                                           |\n|---------------------------|-------------------------------------------------------------------------------------------------------|\n| inv_id                    | Unique invoice ID  number of the invoice                                                              |\n| inv_worksheet_id          | Worksheet ID that is used to generate this invoice                                                    |\n| inv_quo_id                | Quotation ID that is used to generate this invoice                                                    |\n| inv_inv_id                | Parent invoice ID. Used when creating a credit invoice.                                               |\n| inv_type                  | Invoice type, can be DEBIT, CREDIT, CONCEPT_DEBIT or CONCEPT_CREDIT                                   |\n| inv_currency_code         | ISO 4217 currency code                                                                                |\n| inv_currency_symbol       | Currency symbol shown in the UI                                                                       |\n| inv_description           | Description of the invoice                                                                            |\n| inv_invoice_debtor_nr     | Debtor number of the assigned relation                                                                |\n| inv_invoice_debtor_name   | Debtor name of the assigned relation                                                                  |\n| inv_invoice_debtor_email  | Debtor e-mail of the assigned relation                                                                |\n| inv_number_numeric        | Invoice number numeric value                                                                          |\n| inv_number_formatted      | Pretty formatted invoice number                                                                       |\n| inv_status                | Invoice status, can be OPEN, PAYED, OVERDUE, REMINDER_1, REMINDER_2, REMINDER_3 or ...                |\n| inv_reference             | Reference, example purchase order number workorder number                                             |\n| inv_date                  | Invoice date                                                                                          |\n| inv_due_date              | Invoice due date                                                                                      |\n| inv_due_days              | Amount of due days. This days are added to the inv_date to calculate the inv_due_date.                |\n| inv_terms                 | Terms shown in the footer of the PDF.                                                                 |\n| inv_header                | Header shown on top of the PDF.                                                                       |\n| inv_amount                | Total amount including VAT.                                                                           |\n| inv_amount_excl           | Total amount excluding VAT.                                                                           |\n| inv_balance               | Total amounts of the transactions registered to this invoice.                                         |\n| inv_user_create           | User who created this invoice                                                                         |\n| inv_user_mutate           | User who mutated this invoice                                                                         |\n| inv_user_send             | User who marked this invoice as send.                                                                 |\n| inv_timestamp_create      | Timestamp of creation                                                                                 |\n| inv_timestamp_mutate      | Timestamp of mutating                                                                                 |\n| inv_timestamp_payed       | Timestamp when the invoice was marked as payed (inv_amount equal to inv_balance)                      |\n| inv_timestamp_send        | Timestamp of marking the invoice as send.                                                             |\n| iln_lines                 | Array of invoice lines.                                                                               |\n| invoice_debtor            | Invoice debtor.                                                                                       |\n| pdf                       | Temporary PDF url.                                                                                    |\n| ubl                       | Temporary ubl 2.0 url.                                                                                |\n\nInvoice line parameters\n\n| Parameter             | Description                                      |\n|-----------------------|--------------------------------------------------|\n| iln_id                | Line ID                                          |\n| iln_inv_id            | Invoice Id                                       |\n| iln_order             | Position of the line                             |\n| iln_material_code     | Material code                                    |\n| iln_material_hourtype | Hourtype code                                    |\n| iln_description       | Line description                                 |\n| iln_amount            | Line amount                                      |\n| iln_price             | Item price                                       |\n| iln_vat_percentage    | Vat percentage                                   |\n| iln_discount          | Discount percentage                              |\n| iln_total             | Total price excluding vat and discount           |\n| iln_total_discount    | Calculated discount amount                       |\n| iln_total_vat         | Calculated vat amount                            |\n| iln_total_excl        | Total price excluding vat and including discount |\n| iln_total_incl        | Total price including vat and including discount |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Updateinvoice.in.json",
                "out": "./lib/schemas/Updateinvoice.out.json"
            }
        },
        "Addtransactions": {
            "main": "./lib/actions/Addtransactions.js",
            "title": "Add transactions",
            "description": "This api is used to fetch a single generated invoice from WorkorderApp.\nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1&operator=gt\nAdding multiple filters: &key[]=key1&value[]=value1&operator[]=eq&key[]=key2&value[]=value2&operator[]=gt\n\nFollowing operators are allowed:\n\n| Operator | Description                 |\n|----------|-----------------------------|\n| li       | Like (%)                    |\n| eq       | Equal (=)                   |\n| ne       | Not equal (!=)              |\n| gt       | Greather than (>)           |\n| ge       | Greather than or equal (>=) |\n| lt       | Less than  (<)              |\n| le       | Less than or equal (<=)     |\nTransaction parameters. The invoice id of a transaction transaction can be empty if a transaction is not assigned to an invoice. Once it is assigned the balance of the invoice will be adjusted.\n\n| Paramter                    | Description                                | Type         |\n|-----------------------------|--------------------------------------------|--------------|\n| int_inv_id                  | Invoice ID                                 | int(11)      |\n| int_transaction_id          | Transaction ID                             | varchar(255) |\n| int_external_transaction_id | External Transaction ID                    | varchar(255) |\n| int_description             | Transaction Description                    | varchar(255) |\n| int_amount                  | Transaction amount                         | decimal(7,2) |\n| int_type                    | Transaction type                           | varchar(255) |\n| int_type_description        | Transaction type description               | varchar(255) |\n| int_status                  | Transaction status,NEW or PROCESSED        | varchar(55)  |\n| int_user                    | User/entity who registered the transaction | varchar(255) |\n| int_timestamp               | Timestamp registered                       | timestamp    |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addtransactions.in.json",
                "out": "./lib/schemas/Addtransactions.out.json"
            }
        },
        "Updatetransactions": {
            "main": "./lib/actions/Updatetransactions.js",
            "title": "Update transactions",
            "description": "This api is used to fetch a single generated invoice from WorkorderApp.\nFilters can be given by adding a key and values array to the URL.\nAdding a single filter: &key=key1&value=value1&operator=gt\nAdding multiple filters: &key[]=key1&value[]=value1&operator[]=eq&key[]=key2&value[]=value2&operator[]=gt\n\nFollowing operators are allowed:\n\n| Operator | Description                 |\n|----------|-----------------------------|\n| li       | Like (%)                    |\n| eq       | Equal (=)                   |\n| ne       | Not equal (!=)              |\n| gt       | Greather than (>)           |\n| ge       | Greather than or equal (>=) |\n| lt       | Less than  (<)              |\n| le       | Less than or equal (<=)     |\nTransaction parameters. The invoice id of a transaction transaction can be empty if a transaction is not assigned to an invoice. Once it is assigned the balance of the invoice will be adjusted.\n\n| Parameter                    | Description                                | Type         |\n|-----------------------------|--------------------------------------------|--------------|\n| int_inv_id                  | Invoice ID                                 | int(11)      |\n| int_transaction_id          | Transaction ID                             | varchar(255) |\n| int_external_transaction_id | External Transaction ID                    | varchar(255) |\n| int_description             | Transaction Description                    | varchar(255) |\n| int_amount                  | Transaction amount                         | decimal(7,2) |\n| int_type                    | Transaction type                           | varchar(255) |\n| int_type_description        | Transaction type description               | varchar(255) |\n| int_status                  | Transaction status,NEW or PROCESSED        | varchar(55)  |\n| int_user                    | User/entity who registered the transaction | varchar(255) |\n| int_timestamp               | Timestamp registered                       | timestamp    |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Updatetransactions.in.json",
                "out": "./lib/schemas/Updatetransactions.out.json"
            }
        },
        "Addcontactpersons": {
            "main": "./lib/actions/Addcontactpersons.js",
            "title": "Add contact persons",
            "description": "This api is used to sync contact persons with WorkorderApp. A contact person should always be related to a certain client.\n`cpn_code` is used as a unique reference to either insert or update the address.\nEach address record can contain the following data:\n\n| Parameter                 | Description                                                                 | Required | Type (size)   |\n|---------------------------|-----------------------------------------------------------------------------|----------|---------------|\n| cpn_debtor_nr             | Debtor number of the relation                                               | Y        | Varchar (255) |\n| cpn_code                  | Unique code of the contact person. Used as reference in the workorder.      | Y        | Varchar (255) |\n| cpn_name                  | Name of the contact person.                                                 | Y        | Varchar (255) |\n| cpn_phone                 | Phone of the contact person.                                                | N        | Varchar (255) |\n| cpn_email                 | Email of the contact person.                                                | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addcontactpersons.in.json",
                "out": "./lib/schemas/Addcontactpersons.out.json"
            }
        },
        "Addgeneric_notes": {
            "main": "./lib/actions/Addgeneric_notes.js",
            "title": "Add generic_notes",
            "description": "This api is used to sync contact persons with WorkorderApp. A contact person should always be related to a certain client.\n`cpn_code` is used as a unique reference to either insert or update the address.\nEach address record can contain the following data:\n\n| Parameter                 | Description                                                                 | Required | Type (size)   |\n|---------------------------|-----------------------------------------------------------------------------|----------|---------------|\n| cpn_debtor_nr             | Debtor number of the relation                                               | Y        | Varchar (255) |\n| cpn_code                  | Unique code of the contact person. Used as reference in the workorder.      | Y        | Varchar (255) |\n| cpn_name                  | Name of the contact person.                                                 | Y        | Varchar (255) |\n| cpn_phone                 | Phone of the contact person.                                                | N        | Varchar (255) |\n| cpn_email                 | Email of the contact person.                                                | N        | Varchar (255) |",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Addgeneric_notes.in.json",
                "out": "./lib/schemas/Addgeneric_notes.out.json"
            }
        }
    }
}